#include "stdafx.h"
#include "tg_opcodes.h"
#include "ChatServerSession.h"


CTG_Opcodes::CTG_Opcodes()
{
	BuildOpcodeList();
}


CTG_Opcodes::~CTG_Opcodes()
{
	delete[] aOpcodeHandler;
}


void CTG_Opcodes::BuildOpcodeList()
{
	for (int i = 0; i < TG_OPCODE_END - TG_OPCODE_BEGIN; i++)
		aOpcodeHandler[i] = new OpcodeHandler<CChatServerSession>;

	StoreOpcode(TG_USER_ENTER_GAME_ACK, "TG_USER_ENTER_GAME_ACK", PROCESS_INPLACE, &CChatServerSession::RecUserEnterGameAck);
	StoreOpcode(TG_USER_AUTH_KEY_CREATED_ACK, "TG_USER_AUTH_KEY_CREATED_ACK", PROCESS_THREADUNSAFE, &CChatServerSession::RecvUserAuthKeyGeneratedAck);
	StoreOpcode(TG_GUILD_CREATE_RES, "TG_GUILD_CREATE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildCreateRes);
	StoreOpcode(TG_GUILD_CREATED_NFY, "TG_GUILD_CREATED_NFY", PROCESS_INPLACE, &CChatServerSession::RecGuildCreateNfy);
	StoreOpcode(TG_GUILD_INVITE_RES, "TG_GUILD_INVITE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildInviteRes);
	StoreOpcode(TG_GUILD_DESTROYED_NFY, "TG_GUILD_DESTROYED_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildDestroyedRes);
	StoreOpcode(TG_GUILD_INFO_REFRESHED_NFY, "TG_GUILD_INFO_REFRESHED_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvGuildInfoRefreshedNfy);
	StoreOpcode(TG_GUILD_PLAYER_GUILDID_CHANGED_NFY, "TG_GUILD_PLAYER_GUILDID_CHANGED_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildIdChangedRes);
	StoreOpcode(TG_GUILD_FUNCTION_ADD_RES, "TG_GUILD_FUNCTION_ADD_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildFunctionAddRes);
	StoreOpcode(TG_GUILD_GIVE_ZENNY_RES, "TG_GUILD_GIVE_ZENNY_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildGiveZenny);
	StoreOpcode(TG_GUILD_BANK_START_RES, "TG_GUILD_BANK_START_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvGuildBankStartRes);
	StoreOpcode(TG_GUILD_CREATE_MARK_RES, "TG_GUILD_CREATE_MARK_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildCreateMarkRes);
	StoreOpcode(TG_GUILD_CHANGE_MARK_RES, "TG_GUILD_CHANGE_MARK_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildChangeMarkRes);
	StoreOpcode(TG_GUILD_CHANGE_NAME_RES, "TG_GUILD_CHANGE_NAME_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecGuildChangeNameRes);
	StoreOpcode(TG_GUILD_BANK_END_NFY, "TG_GUILD_BANK_END_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvGuildBankEndNfy);
	StoreOpcode(TG_BUDOKAI_CHANNEL_STATE_INFO_NFY, "TG_BUDOKAI_CHANNEL_STATE_INFO_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiChannelStateInfoNfy);
	StoreOpcode(TG_BUDOKAI_CHANNEL_UPDATE_STATE, "TG_BUDOKAI_CHANNEL_UPDATE_STATE", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiChannelUpdateState);
	StoreOpcode(TG_BUDOKAI_CHANNEL_UPDATE_MATCH_STATE, "TG_BUDOKAI_CHANNEL_UPDATE_MATCH_STATE", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiChannelUpdateMatchState);
	StoreOpcode(TG_BUDOKAI_TOURNAMENT_INDIVIDUAL_LIST_REQ, "TG_BUDOKAI_TOURNAMENT_INDIVIDUAL_LIST_REQ", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiTournamentIndividualListReq);
	StoreOpcode(TG_BUDOKAI_TOURNAMENT_INDIVIDUAL_INFO_REQ, "TG_BUDOKAI_TOURNAMENT_INDIVIDUAL_INFO_REQ", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiTournamentIndividualInfoReq);
	StoreOpcode(TG_BUDOKAI_TOURNAMENT_TEAM_LIST_REQ, "TG_BUDOKAI_TOURNAMENT_TEAM_LIST_REQ", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiTournamentTeamListReq);
	StoreOpcode(TG_BUDOKAI_TOURNAMENT_TEAM_INFO_REQ, "TG_BUDOKAI_TOURNAMENT_TEAM_INFO_REQ", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiTournamentTeamInfoReq);
	StoreOpcode(TG_BUDOKAI_MINOR_MATCH_INDIVIDUAL_LIST_NFY, "TG_BUDOKAI_MINOR_MATCH_INDIVIDUAL_LIST_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiMinorMatchIndividualListNfy);
	StoreOpcode(TG_BUDOKAI_MINOR_MATCH_TEAM_LIST_NFY, "TG_BUDOKAI_MINOR_MATCH_TEAM_LIST_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiMinorMatchTeamListNfy);
	StoreOpcode(TG_BUDOKAI_MINOR_MATCH_TELEPORT_INFO_REQ, "TG_BUDOKAI_MINOR_MATCH_TELEPORT_INFO_REQ", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiMinorMatchTeleportInfoReq);
	StoreOpcode(TG_BUDOKAI_MINOR_MATCH_TELEPORT_INFO_RES, "TG_BUDOKAI_MINOR_MATCH_TELEPORT_INFO_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiMinorMatchTeleportInfoRes);
	StoreOpcode(TG_BUDOKAI_PROGRESS_MESSAGE_NFY, "TG_BUDOKAI_PROGRESS_MESSAGE_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvBudokaiProgressMessageNfy);
	StoreOpcode(TG_DOJO_CREATE_RES, "TG_DOJO_CREATE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoCreateRes);
	StoreOpcode(TG_CHAR_SERVER_TELEPORT, "TG_CHAR_SERVER_TELEPORT", PROCESS_THREADUNSAFE, &CChatServerSession::RecvCharServerTeleport);
	StoreOpcode(TG_DOJO_CREATED_NFY, "TG_DOJO_CREATED_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoCreatedNfy);
	StoreOpcode(TG_DOJO_DELETE_RES, "TG_DOJO_DELETE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoDeleteRes);
	StoreOpcode(TG_DOJO_FUNCTION_ADD_RES, "TG_DOJO_FUNCTION_ADD_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoFunctionAddRes);
	StoreOpcode(TG_DOJO_UPDATE_RES, "TG_DOJO_UPDATE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoUpdateRes);
	StoreOpcode(TG_DOJO_SEND_ATT_GUILD_ID, "TG_DOJO_SEND_ATT_GUILD_ID", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoSendAttGuildId);
	StoreOpcode(TG_DOJO_NPC_INFO_RES, "TG_DOJO_NPC_INFO_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoNpcInfoRes); 
	StoreOpcode(TG_DOJO_SEND_TELEPORT_PROPOSAL_NFY, "TG_DOJO_SEND_TELEPORT_PROPOSAL_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoSendTeleportProposalNfy);
	StoreOpcode(TG_DOJO_USERCOUNT_CHANGE, "TG_DOJO_USERCOUNT_CHANGE", PROCESS_INPLACE, &CChatServerSession::RecvDojoUserCountChange); //INPLACE !!! To make sure its updated asap
	StoreOpcode(TG_DOJO_DESTROYED_NFY, "TG_DOJO_DESTROYED_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoDestroyedNfy);
	StoreOpcode(TG_DOJO_SCRAMBLE_RES, "TG_DOJO_SCRAMBLE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoScrambleRes);
	StoreOpcode(TG_DOJO_SCRAMBLE_RESPONSE, "TG_DOJO_SCRAMBLE_RESPONSE", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoScrambleResponse);
	StoreOpcode(TG_DOJO_SCRAMBLE_STATE_CHANGE, "TG_DOJO_SCRAMBLE_STATE_CHANGE", PROCESS_THREADUNSAFE, &CChatServerSession::RecvDojoScrambleStateChange);
	StoreOpcode(TG_CONNECT_CHANNEL_CHANGE_RES, "TG_CONNECT_CHANNEL_CHANGE_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecvConnectChannelChangeRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_SELL_RES, "TG_TENKAICHIDAISIJYOU_SELL_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHouseSellRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_SELL_CANCEL_RES, "TG_TENKAICHIDAISIJYOU_SELL_CANCEL_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHouseSellCancelRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_PRICE_INFO_RES, "TG_TENKAICHIDAISIJYOU_PRICE_INFO_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHousePriceInfoRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_BUY_RES, "TG_TENKAICHIDAISIJYOU_BUY_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHouseBuyRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_LIST_DATA, "TG_TENKAICHIDAISIJYOU_LIST_DATA", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHouseListData);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_LIST_RES, "TG_TENKAICHIDAISIJYOU_LIST_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHouseListDataRes);
	StoreOpcode(TG_TENKAICHIDAISIJYOU_PERIODEND_RES, "TG_TENKAICHIDAISIJYOU_PERIODEND_RES", PROCESS_THREADUNSAFE, &CChatServerSession::RecAuctionHousePeriodEndRes);

	StoreOpcode(TG_WAGUCOIN_DECREASE_NFY, "TG_WAGUCOIN_DECREASE_NFY", PROCESS_THREADUNSAFE, &CChatServerSession::RecvWaguCoinDecreaseNfy);
	StoreOpcode(TG_WAGUWAGUMACHINE_UPDATE_CASHITEM_INFO, "TG_WAGUWAGUMACHINE_UPDATE_CASHITEM_INFO", PROCESS_THREADUNSAFE, &CChatServerSession::RecvWaguWaguMachineUpdateCashitemInfo);
}


